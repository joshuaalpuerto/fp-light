{"version":3,"file":"index.umd.js","sources":["../src/not.js","../src/complement.js","../src/identity.js","../src/ifElse.js","../src/when.js"],"sourcesContent":["/**\n * Returns the negate result of calling argument\n * TODO: work on signature, make this curry function\n * @param {*} predicate \n * @param {*} trueFn \n */\nconst not = (arg) =>\n  !arg\n\n\nexport default not","import not from './not'\n/**\n * Returns the negate result of the calling function\n * TODO: work on signature, make this curry function\n * @param {*} predicate \n * @param {*} trueFn \n */\nconst complement = (fn) => (...args) =>\n  not(fn(...args))\n\n\nexport default complement","/**\n * A function that returns the same value\n * Why since identity function acts like a neutral value in functions \n * Just like 0 to number. where it doesn't return value\n * This is very useful in HOF wehere we just ned the value\n * @param {*} val \n */\nconst identity = (val) => val\nexport default identity","/**\n * Returns function that if predicate is evaluate correctly \n * will evaluate the true statement else evaluate the false.\n * TODO: work on signature, make this curry function\n * @param {*} predicate \n * @param {*} truthy \n * @param {*} falsy \n */\nconst ifElse = (predicate, truthy, falsy) => (...args) =>\n  predicate(...args) ? truthy(...args) : falsy(...args)\n\n\nexport default ifElse","/**\n * Returns function that if predicate is evaluated true  \n * then will return the whenTrueFn given the same argument otherwise will just return the argument as is.\n * TODO: work on signature, make this curry function\n * @param {*} predicate \n * @param {*} trueFn \n */\nconst when = (predicate, trueFn) => (args) =>\n  predicate(args) ? trueFn(args) : args\n\n\nexport default when"],"names":["const","not","arg","fn","args","val","predicate","truthy","falsy","trueFn"],"mappings":"6KAMAA,IAAMC,WAAOC,UACVA,yBCAiBC,mFAClBF,EAAIE,aAAG,EAAGC,0BCDMC,UAAQA,qBCCVC,EAAWC,EAAQC,mFACjCF,aAAU,EAAGF,GAAQG,aAAO,EAAGH,GAAQI,aAAM,EAAGJ,6BCFpCE,EAAWG,mBAAYL,UACnCE,EAAUF,GAAQK,EAAOL,GAAQA"}